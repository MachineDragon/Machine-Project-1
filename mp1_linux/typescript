Script started on Thu 05 Mar 2020 11:08:23 AM EST
mikehj24@itserver6:~/cs341/mp1_linux$ ls -al
total 544
drwxr-sr-x 2 mikehj24 cs341-1G   4096 Mar  5 11:08 .
drwxrws--- 3 mikehj24 cs341-1G   4096 Mar  5 09:25 ..
-rw-r--r-- 1 mikehj24 cs341-1G   3660 Mar  5 10:49 cmds.c
-rw-r--r-- 1 mikehj24 cs341-1G   4868 Mar  5 10:50 cmds.o
-rw-r--r-- 1 mikehj24 cs341-1G   2329 Mar  5 11:07 discussion.txt
-rw-r--r-- 1 mikehj24 cs341-1G   2804 Mar  5 09:25 makefile
-rw-r--r-- 1 mikehj24 cs341-1G 261021 Mar  5 09:25 mp1.pdf
-rw-r--r-- 1 mikehj24 cs341-1G 206833 Mar  5 09:25 mp1warmup.pdf
-rw-r--r-- 1 mikehj24 cs341-1G  12533 Mar  5 09:25 Rubric.docx
-rw-r--r-- 1 mikehj24 cs341-1G   2394 Mar  5 09:25 slex.c
-rw-r--r-- 1 mikehj24 cs341-1G   1846 Mar  5 09:25 slex.h
-rw-r--r-- 1 mikehj24 cs341-1G   3264 Mar  5 10:50 slex.o
-rw-r--r-- 1 mikehj24 cs341-1G    886 Mar  5 10:35 syms
-rwxr-xr-x 1 mikehj24 cs341-1G  11572 Mar  5 10:50 tutor
-rw-r--r-- 1 mikehj24 cs341-1G   2212 Mar  5 09:25 tutor.c
-rw-r--r-- 1 mikehj24 cs341-1G   3600 Mar  5 10:50 tutor.o
-rw-r--r-- 1 mikehj24 cs341-1G      0 Mar  5 11:08 typescript-Unix
-rw-r--r-- 1 mikehj24 cs341-1G   1260 Mar  5 10:50 usyms
mikehj24@itserver6:~/cs341/mp1_linux$ cat discussion.txt
Michael Hajjar
Machine Project 1
CS341

Question 1.)

I tested my code several times using the make tutor function which displayed the errors that I needed to fix.
I found out many things trying to test out code, one of them for example is that you cannot test make tutor in another folder 
than the one already created in the cs341 folder, 
I tried to create a test folder with different code for cmds.c to run but when 
I tried running make tutor it would go back to my original cmds file from the cs341 folder. 
I also used visual studio code for error messages and fixing up my code as it is easier to edit in those programs 
rather then on Unix and transfered it over to my cs341 director. I learned a lot about using Unix and unix commands.


2.)  

If you call for a memory display of an address that does not correspond to a  memory address then you get Exception 14 at EIP=31313131: page fault. 
On UNIX I get segmentation fault The code gives different outputs on SACP and UNIX 


3.)

a.) xyz is stored in 0804a07c 

b.) pxyz is in location 0804a080 and the value is 6

c.) memory address of cmds is 0804a040, the memory address for initial is 0804830c in the usyms file and ends at 0804a088. When I use md m i get 0804896a and md for d i get 0000000d.

d.) You can't change it while it's running 



4.)

The code starts at 00100100 and ends at 001021c8 on unix.


5.) 

In Unix you get a segmentation fault, and in SACP the command line will stop working and you will get exception 14.


6.) 

The command was not found in the program


7.)

Using md to get the memory addresses of inputs and ms to change their memory addresses. 
I have had so many glitches in VM after hitting the ~d command starting over so many times until 
I figured out the exact way to make it not glitch, by opening tutor up after downloading linux, 
not having it open at the same time which was what I was doing and hitting ctr send alt delete.

8.)

I had to relearn addresses and pointers for c, as well as inputs and %values to input chars and numbers to output them, 
it took a while to setup the vm without crashing or glitching. 
The hardest part was cmds and programming it took many days, 
I had to delete the mp1_linux and start over because when I put in md I wasn't getting any output, 
this was the most time consuming part.

mikehj24@itserver6:~/cs341/mp1_linux$ cat slex.c
/******************************************************************
*
*   file:   slex.c
*   author: betty o'neil
*   date:   ?
*
*   simple lexical analyzer, front part of a parser                   
*   --compare to UNIX tool "lex", general lexical analyzer            
*   gets a (space-delimited) token from linebuf and tries to match    
*   it to one of the cmdtokens in the provided cmdtable             
*
*   accepts:       
*         linebuf--string to get token from                         
*         cmdtable--cmdtable to use                                 
*   returns:                                                          
*         *cnum_ptr--command # (offset in cmdtable) or -1 if no match
*         *pos_ptr--new place in linebuf after token match          
*
*   improvements needed:
*         make token matching case independent
*         skip whitespace, not just blanks
*
*   revisions: 
*     9/90 cleanup, convert function headers to ansi form
*
*/

#include <stdio_1.h>
#include <string.h>
#include "slex.h"		/* for definition of type cmd */

int slex(char *linebuf,    /* string from user */
         Cmd cmdtable[],   /* cmd table to use */
         int *cnum_ptr,    /* returned command number */
         int *pos_ptr)      /* returned new place in linebuf */
{
  int i = 0;
  char token[MAXTOKENLEN];
  int newpos;

  if (gettoken(linebuf,token,&newpos)<0) /* get token from linebuf */
    return -1;			/* couldn't find token */

  while ((cmdtable[i].cmdtoken != NULL)) {
    if (strcmp(cmdtable[i].cmdtoken,token)==0) {
	*cnum_ptr = i;		/* success--return command # */
	*pos_ptr = newpos;	/* and where we got to in linebuf */
	return 0;
    }
    else
      i++;			/* keep scanning table */
  }
  return -1;			/* no match */
}

/******************************************************************
 * get one space-delimited token from string in linebuf, also return 
 * new position in string 
 */
int gettoken(char *linebuf, char *token, int *pos_ptr)
{
  int i = 0;
  int j = 0;

  while (linebuf[i] == ' ')
    i++;			/* skip blanks */
  while (linebuf[i] != ' '&&linebuf[i]!='\0')
    token[j++] = linebuf[i++];	/* copy chars to token */
  if (j==0)
    return -1;			/* nothing there */
  else
    {
      token[j] = '\0';		/* null-terminate token */
      *pos_ptr = i;		/* return place in linebuf we got to */
      return 0;			/* success */
    }
}
mikehj24@itserver6:~/cs341/mp1_linux$ cat tutor.c
/******************************************************************
*
*   file:     tutor.c
*   author:   eb
*   date:     September, 1990
*
*   Driver for a "tutor" program to mimic and extend the MECB ROM TUTOR.
* 
*   built from betty o'neil's previous version
*
*   revisions:
*   Jan '96: changed prompt to PC-tutor, now mimics floppy-based Tutor
*/

#include <stdio_1.h>
#include "slex.h" 
/* The preprocessor symbol SAPC is #defined in $pcinc/stdio.h.  This
 * stdio.h is found by i386-gcc because of the -I flag in its compile command
 * in the Makefile.  In the UNIX case, there is no such redirection,
 * so the ordinary stdio.h is used, and it has no SAPC definition.
 */
#ifdef SAPC
#define PROMPT "PC-tutor> "
#else
#define PROMPT "UNIX-tutor> "
#endif
int main(void);

int main()
{
  int done = 0;
  int cnum,linepos;
  char linebuf[LINELEN];
  Cmd *cp;

  printf("     cmd    help message\n");
  for(cp = cmds; cp->cmdtoken; cp++) 
      printf("%8s    %s\n", cp->cmdtoken, cp->help);

  while (!done) {
    /* get cmd token from user by parsing first part of line in linebuf-- */
    getcmd(linebuf,&cnum,&linepos);
    /* call implementation routine for matched cmd-- */
    /* (remaining part of line to parse starts at linebuf+linepos) */
    done = cmds[cnum].cmdfn(&cmds[cnum], linebuf+linepos); 
  }
  return 0;
}

/***********************************************************************
*
*  getcmd 
*
* Better than scanf--read whole line in, parse resulting string.
* Uses slex package to match cmd token in first part of linebuf 
* and return command # and where to continue parsing.
* Getcmd loops until user provides proper command, so no error return.
*/
void getcmd(char *linebuf, 
             int *cnum_ptr,   /* returned command number */
             int *pos_ptr     /* position in linebuf (after cmd token) */
           )
{
  int done = 0;

  while (!done) {
     printf( PROMPT );
     gets(linebuf);		/* read line from user, null terminate */
     /* match cmd token to get cnum--call slex package to do lookup-- */
     if (slex( linebuf, cmds, cnum_ptr, pos_ptr)==0) 
         done = 1;	/* success in matching cmd */
     else
         printf(" No such command\n");
  }
}
mikehj24@itserver6:~/cs341/mp1_linux$ cat cmds.c
/******************************************************************
*
*   file:     cmds.c
*   author:   betty o'neil
*   date:     ?
*
*   semantic actions for commands called by tutor (cs341, hw2)
*
*   revisions:
*      9/90  eb   cleanup, convert function declarations to ansi
*      9/91  eb   changes so that this can be used for hw1
*      9/02  re   minor changes to quit command
*/
/* the Makefile arranges that #include <..> searches in the right
   places for these headers-- 200920*/

#include <stdio_1.h>
#include "slex.h"

/*===================================================================*
*
*   Command table for tutor program -- an array of structures of type
*   cmd -- for each command provide the token, the function to call when
*   that token is found, and the help message.
*
*   slex.h contains the typdef for struct cmd, and declares the
*   cmds array as extern to all the other parts of the program.
*   Code in slex.c parses user input command line and calls the
*   requested semantic action, passing a pointer to the cmd struct
*   and any arguments the user may have entered.
*
*===================================================================*/

PROTOTYPE int stop(Cmd *cp, char *arguments);
PROTOTYPE int mem_display(Cmd *cp, char *arguments);
PROTOTYPE int mem_set(Cmd *cp, char *arguments);
PROTOTYPE int help(Cmd *cp, char *arguments);
PROTOTYPE unsigned int atox(char **arguments);
/* command table */

Cmd cmds[] = {{"md",  mem_display, "Memory display: MD <addr>"},
              {"ms",  mem_set, "Memory set: MS <addr> <value>"},
              {"h",   help, "Help: H <command>"},
              {"s",   stop,        "Stop" },
              {NULL,  NULL,        NULL}};  /* null cmd to flag end of table */

char xyz = 6;  /* test global variable  */
char *pxyz = &xyz;  /* test pointer to xyz */
/*===================================================================*
*		command			routines
*
*   Each command routine is called with 2 args, the remaining
*   part of the line to parse and a pointer to the struct cmd for this
*   command. Each returns 0 for continue or 1 for all-done.
*
*===================================================================*/

int stop(Cmd *cp, char *arguments)
{
  return 1;			/* all done flag */
}

/*===================================================================*
*
*   mem_display: display contents of 16 bytes in hex
*
*/

int mem_display(Cmd *cp, char *arguments)
{
  unsigned int address;
  int value = 0;
  unsigned char *address_pointer;

  sscanf(arguments, "%x", &address); 
  address_pointer = (char *)address;


  printf("Here is the address: %08x \n", address);
  for(value = 0; value < 16; value++)
  	printf("%02x ", *address_pointer++);
  address_pointer = (unsigned char *)address;
  for(value = 0; value < 16; value++) {
  	if(*address_pointer > 0x20 && *address_pointer < 0x7f) {
    printf("%c", *address_pointer++);
  }
	else {
		printf(".");
		address_pointer++;
    }
  }

  printf("\n");	  
  printf("Reached mem_display, passed argument string: |%s|\n", arguments);
  printf("        help message: %s\n", cp->help);
  return 0;			/* not done */

}


int mem_set(Cmd *cp, char *arguments)
{
  int val = 0, address;
  char *address_pointer;
  sscanf(arguments,"%x %x", &address, &val );
  address_pointer = (char *)address;
  *address_pointer = val;
  return 0;
}


int help(Cmd *cp, char *arguments)
{
  char size[6];
  int num = 0;
  int length = sizeof(cmds)/sizeof(Cmd);
  sscanf(arguments, "%s", size);
while (num < length){
  if ((strcmp(cmds[num].cmdtoken, size)) == 0) {
		printf("%s\n", cmds[num].help);
    break;
} else num++ ;
}
return 0;
  
}mikehj24@itserver6:~/cs341/mp1_linux$ cat makefile
# Makefile for building cs341 mp1 programs using the

# Standalone 486 or Pentium IBM PC running in 32-bit protected mode,

# or "SAPC" for short.  LINUX builds also, and "make clean"



# system directories needed for compilers, libraries, header files--

#    /home/cheungr/serl/tutor-linux

#    

# All UNIX tools from ulab had been moved to LINUX by

#

#     Ron Cheung (2/28/2020)

#

SAPC_TOOLS = /home/cheungr/serl/tutor-linux

PC_INC = $(SAPC_TOOLS)/include

PC_LIB = $(SAPC_TOOLS)/libc



# ************** SAPC build **********

PC_CC    = gcc

PC_CFLAGS  = -g -march=i586 -m32 -fno-builtin -fno-stack-protector -nostdlib -c -Wall -I$(PC_INC)

PC_AS    = as --32

PC_NM    = nm

PC_LD    = ld -m elf_i386



# File suffixes:

# .c	C source (often useful both for UNIX and SAPC)

# .s 	assembly language source (gnu as for protected mode 486)

# .o    relocatable machine code, initialized data, etc., for UNIX and SAPC

# .lnx  executable image (bits as in memory), for SA PC (Linux a.out format)

# .syms text file of .exe's symbols and their values (the "symbol table")

# .usyms text file of UNIX executable's symbols



# where to find files

# change this to your homework folder

PROJ = $(HOME)/cs341/mp1_linux



PC_OBJS = $(PROJ)/tutor.o $(PROJ)/slex.o

UNIX_OBJS = $(PROJ)/tutor.o $(PROJ)/slex.o



# SAPC executable--tell ld to start code at 0x100100, load special startup

# module, special PC C libraries--



tutor.lnx: $(PROJ)/cmds.o $(PC_OBJS) \

	$(PC_LIB)/startup0.o $(PC_LIB)/startup.o $(PC_LIB)/libc.a

	$(PC_LD) -N -Ttext 100100 -o tutor.lnx \

	$(PC_LIB)/startup0.o $(PC_LIB)/startup.o \

	$(PC_OBJS) $(PROJ)/cmds.o $(PC_LIB)/libc.a

#

	rm -f syms;$(PC_NM) -n tutor.lnx>syms



# this rule allows you to build your own *.o files--

$(PROJ)/cmds.o: $(PROJ)/cmds.c $(PROJ)/slex.h

	$(PC_CC) $(PC_CFLAGS) -c -o $(PROJ)/cmds.o $(PROJ)/cmds.c



$(PROJ)/tutor.o: $(PROJ)/tutor.c $(PROJ)/slex.h

	$(PC_CC) $(PC_CFLAGS) -c -o $(PROJ)/tutor.o $(PROJ)/tutor.c



$(PROJ)/slex.o: $(PROJ)/slex.c $(PROJ)/slex.h

	$(PC_CC) $(PC_CFLAGS) -c -o $(PROJ)/slex.o $(PROJ)/slex.c



# ************** LINUX build **********

# tell make to use gcc as C compiler, -g -W... for C compiler flags--

# use -m32 option to build 32-bit executable 

# use stdio.h from the GNU C library

# check "man gcc" to find out what -W flags do

#

CC = gcc -m32

CFLAGS = -Wall -Wno-implicit -Wshadow -g



tutor:  $(UNIX_OBJS) $(PROJ)/cmds.o

	$(CC) -g -o tutor $(UNIX_OBJS) $(PROJ)/cmds.o

#

	rm -f usyms; nm -vpt x tutor > usyms



# make knows to use $(CC) and $(CFLAGS)

$(PROJ)/cmds.o:	$(PROJ)/cmds.c  $(PROJ)/slex.h

$(PROJ)/tutor.o: $(PROJ)/tutor.c $(PROJ)/slex.h

$(PROJ)/slex.o: $(PROJ)/slex.c  $(PROJ)/slex.h

# **************end of LINUX build ********



clean:

	rm -f *.o *.lnx tutor core



mikehj24@itserver6:~/cs341/mp1_linux$ make
ld -m elf_i386 -N -Ttext 100100 -o tutor.lnx \
/home/cheungr/serl/tutor-linux/libc/startup0.o /home/cheungr/serl/tutor-linux/libc/startup.o \
/home/mikehj24/cs341/mp1_linux/tutor.o /home/mikehj24/cs341/mp1_linux/slex.o /home/mikehj24/cs341/mp1_linux/cmds.o /home/cheungr/serl/tutor-linux/libc/libc.a
rm -f syms;nm -n tutor.lnx>syms
mikehj24@itserver6:~/cs341/mp1_linux$ make clean
rm -f *.o *.lnx tutor core
mikehj24@itserver6:~/cs341/mp1_linux$ make tutor
gcc -g -march=i586 -m32 -fno-builtin -fno-stack-protector -nostdlib -c -Wall -I/home/cheungr/serl/tutor-linux/include -c -o /home/mikehj24/cs341/mp1_linux/tutor.o /home/mikehj24/cs341/mp1_linux/tutor.c
gcc -g -march=i586 -m32 -fno-builtin -fno-stack-protector -nostdlib -c -Wall -I/home/cheungr/serl/tutor-linux/include -c -o /home/mikehj24/cs341/mp1_linux/slex.o /home/mikehj24/cs341/mp1_linux/slex.c
gcc -g -march=i586 -m32 -fno-builtin -fno-stack-protector -nostdlib -c -Wall -I/home/cheungr/serl/tutor-linux/include -c -o /home/mikehj24/cs341/mp1_linux/cmds.o /home/mikehj24/cs341/mp1_linux/cmds.c
[01m[K/home/mikehj24/cs341/mp1_linux/cmds.c:[m[K In function ‘[01m[Kmem_display[m[K’:
[01m[K/home/mikehj24/cs341/mp1_linux/cmds.c:76:19:[m[K [01;35m[Kwarning: [m[Kpointer targets in assignment differ in signedness [-Wpointer-sign]
   address_pointer = (char *)address;
[01;32m[K                   ^[m[K
[01m[K/home/mikehj24/cs341/mp1_linux/cmds.c:[m[K In function ‘[01m[Khelp[m[K’:
[01m[K/home/mikehj24/cs341/mp1_linux/cmds.c:119:8:[m[K [01;35m[Kwarning: [m[Kimplicit declaration of function ‘[01m[Kstrcmp[m[K’ [-Wimplicit-function-declaration]
   if ((strcmp(cmds[num].cmdtoken, size)) == 0) {
[01;32m[K        ^[m[K
gcc -m32 -g -o tutor /home/mikehj24/cs341/mp1_linux/tutor.o /home/mikehj24/cs341/mp1_linux/slex.o /home/mikehj24/cs341/mp1_linux/cmds.o
/home/mikehj24/cs341/mp1_linux/tutor.o: In function `getcmd':
/home/mikehj24/cs341/mp1_linux/tutor.c:68: warning: the `gets' function is dangerous and should not be used.
rm -f usyms; nm -vpt x tutor > usyms
mikehj24@itserver6:~/cs341/mp1_linux$ ./tutor
     cmd    help message
      md    Memory display: MD <addr>
      ms    Memory set: MS <addr> <value>
       h    Help: H <command>
       s    Stop
UNIX-tutor> md xyz
Here is the address: 0804896a 
25 38 73 20 20 20 20 25 73 0a 00 55 4e 49 58 2d %8s....%s..UNIX-
Reached mem_display, passed argument string: | xyz|
        help message: Memory display: MD <addr>
UNIX-tutor> md pxyz
Here is the address: 0804896a 
25 38 73 20 20 20 20 25 73 0a 00 55 4e 49 58 2d %8s....%s..UNIX-
Reached mem_display, passed argument string: | pxyz|
        help message: Memory display: MD <addr>
UNIX-tutor> h md
Memory display: MD <addr>
UNIX-tutor> h ms
Memory set: MS <addr> <value>
UNIX-tutor> h h
Help: H <command>
UNIX-tutor> h s
Stop
UNIX-tutor> ms xyz d1
Segmentation fault (core dumped)
mikehj24@itserver6:~/cs341/mp1_linux$ md xyz
md: command not found
mikehj24@itserver6:~/cs341/mp1_linux$ md xyz./tutor
     cmd    help message
      md    Memory display: MD <addr>
      ms    Memory set: MS <addr> <value>
       h    Help: H <command>
       s    Stop
UNIX-tutor> md xyz
Here is the address: 0804896a 
25 38 73 20 20 20 20 25 73 0a 00 55 4e 49 58 2d %8s....%s..UNIX-
Reached mem_display, passed argument string: | xyz|
        help message: Memory display: MD <addr>
UNIX-tutor> s
mikehj24@itserver6:~/cs341/mp1_linux$ exit
exit

Script done on Thu 05 Mar 2020 11:12:01 AM EST



SACP Script


Script started on Thu 05 Mar 2020 11:17:38 AM EST
tuser@tutor-vserver:~$ scp mikehj24@users.cs.umb.edu:cs341/mp1_linux/tutor.* .
mikehj24@users.cs.umb.edu's password: 

tutor.c                                         0%    0     0.0KB/s   --:-- ETA
tutor.c                                       100% 2212     2.2KB/s   00:00    

tutor.lnx                                       0%    0     0.0KB/s   --:-- ETA
tutor.lnx                                     100%   23KB  22.8KB/s   00:00    

tutor.o                                         0%    0     0.0KB/s   --:-- ETA
tutor.o                                       100% 3600     3.5KB/s   00:00    
tuser@tutor-vserver:~$ mtip -f tutor.lnx
For command help, type ~?
For help on args, rerun without args
Code starts at 0x100100
Using board # 1 

Please type <CR> to confirm console setting: 
Setting console dev to COM2Console: colour EGA+ 80x25
COM1 at 0x03f8 (irq = 4) is a 16550A
COM2 at 0x02f8 (irq = 3) is a 16550A

                 Welcome to UMB Tutor for the PC
   UMB Tutor is a 32-bit protected-mode PC debugger/downloader,
       based on Linux, UMB Tutor for m68k, and remote gdb.
UMB Tutor is free software and you are welcome to distribute copies
of it under certain conditions.  There is no warranty for this program.
The copyright and warranty provisions follow the Gnu general public
license, available for view in gdb and elsewhere.  Full sources available.
--bugs, suggestions, questions to eoneil@cs.umb.edu

Exception 3 at EIP=00057a9b: Breakpoint
Tutor> ~downloading tutor.lnx


.........Done.



Download done, setting EIP to 100100.
Tutor> <CNTL-J>

No such command: <CNTL-J>, use h command for help
Tutor> go 100100

     cmd    help message
      md    Memory display: MD <addr>
      ms    Memory set: MS <addr> <value>
       h    Help: H <command>
       s    Stop
UNIX-tutor> md 10000
Here is the address: 00010000 
ea 05 00 c0 07 8c c8 8e d8 8e c0 8e d0 31 e4 fb .............1..
Reached mem_display, passed argument string: | 10000|
        help message: Memory display: MD <addr>
UNIX-tutor> md 100100
Here is the address: 00100100 
bc f0 ff 3f 00 bd 00 00 00 00 e8 01 00 00 00 cc ...?............
Reached mem_display, passed argument string: | 100100|
        help message: Memory display: MD <addr>
UNIX-tutor> ms 100100 21
UNIX-tutor> md
Here is the address: 00100100 
21 f0 ff 3f 00 bd 00 00 00 00 e8 01 00 00 00 cc !..?............
Reached mem_display, passed argument string: ||
        help message: Memory display: MD <addr>
UNIX-tutor> md 100100
Here is the address: 00100100 
21 f0 ff 3f 00 bd 00 00 00 00 e8 01 00 00 00 cc !..?............
Reached mem_display, passed argument string: | 100100|
        help message: Memory display: MD <addr>
UNIX-tutor> ms
UNIX-tutor> h md
Exception 14 at EIP=001010b2: Page fault
Tutor> h ms

Memory Set        : MS <addr> <val> [<val>...]
Tutor> h h

Display help      : H [command]
Tutor> h s

Display help      : H [command]
Register Display  : RD [ALL]
Register Set      : RS <reg> <val>
Memory Display    : MD <addr>
Memory DW Display : MDD <addr>
Memory Set        : MS <addr> <val> [<val>...]
Port Display      : PD <port>
Port Set          : PS <port> <val> [<val>...]
Device Display    : DD
Device Set        : DS <dev> HL|CON|INIT|BOOT|BAUD <bps>
Device TestPattern: DT <dev> [HWFC|SWFC|NONE] [<linecount>]
Transparent Mode  : TM [<escapechar>]
Download          : LO
Go, start/resume  : GO [<addr>]
Disp/Set breakpt  : B [<addr>]
Delete breakpt    : D [<addr>]
Trace             : T
Remote gdb        : GDB [<dev>]
<dev> is KBMON|COM1|COM2...|CON|HL, CON for console, HL for hostline.
<CR> repeats DT, MD, MDD, PD, and T commands.  Hex except baudrate.
Tutor> h

Display help      : H [command]
Register Display  : RD [ALL]
Register Set      : RS <reg> <val>
Memory Display    : MD <ad


